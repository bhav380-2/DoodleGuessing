{"version":3,"sources":["img/g6.webp","img/a2.jpg","components/LoadingPage.js","components/HomePage.js","components/DoodleSelector.js","components/DrawingCanvas.js","components/ScoreCard.js","components/Timer.js","components/PlaySoloWithAI.js","hooks/useDoodleGame.js","App.js","index.js"],"names":["module","exports","LoadingPage","loadingMessage","setLoadingMessage","useState","note","window","innerWidth","useEffect","messages","messageIndex","messageInterval","setInterval","length","loadingTimeout","setTimeout","clearInterval","clearTimeout","React","createElement","className","HomePage","loading","setLoading","fetch","then","response","json","_ref","success","Fragment","Link","to","DoodleSelector","round","totalRounds","onSelect","doodles","arr","data","categories","num","sort","Math","random","slice","map","doodle","key","onClick","DrawingCanvas","speak","voice1","voice2","nextRound","timer","setShowScoreCard","setScore","setTotalRounds","canvasStyle","setCanvasStyle","width","height","backgroundColor","borderLeft","prevResult","setPrevResult","result","setResult","prediction","setPrediction","myCanvas","useRef","updateCanvasStyle","addEventListener","removeEventListener","seenPredictions","Set","isCanvasEmpty","console","log","getAnswer","async","pred","replaceAll","current","has","prev","add","speechSynthesis","cancel","handlePredictions","alert","convertURIToImageData","URI","Promise","resolve","reject","canvas","document","context","getContext","image","Image","drawImage","getImageData","src","sketch","canvasContainer","children","toDataURL","sketchData","jimpImage","jimp","read","resize","RESIZE_BEZIER","buffer","getBufferAsync","MIME_PNG","sketchDataURL","toString","sketch28RGBAdata","Array","from","filter","_","i","grayData","reduce","acc","b","push","url","requestOptions","method","headers","body","JSON","stringify","error","getSaveData","clearCanvas","clear","class","CanvasDraw","lazyRadius","brushRadius","brushColor","hideGrid","style","ref","lastIndexOf","substring","trim","ScoreCard","score","href","img","alt","Timer","timeLeft","voice3","isSpeaking","showBubble","setShowBubble","bubbleText","setBubbleText","trollUser","comment","trollComments","floor","voices","selectedVoice","rate","pitch","text","utterance","SpeechSynthesisUtterance","voice","onend","trollSpeak","PlaySoloWithAI","selectedDoodle","setSelectedDoodle","setRound","setTimeLeft","checkPrediction","setIsPlaying","showScoreCard","useDoodleGame","isPlaying","getVoices","onvoiceschanged","find","name","includes","lang","onDrawComplete","App","Router","Switch","Route","path","exact","component","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a6b92d05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/g6.7b583829.webp\";","module.exports = __webpack_public_path__ + \"static/media/a2.e14efc88.jpg\";","import React from 'react';\nimport '../css/loadingPage.css'\nimport { useState, useEffect } from 'react';\n\nconst LoadingPage = () => {\n\n    const [loadingMessage, setLoadingMessage] = useState('  Loading Game ... wait 50 seconds');\n\n    let note = \"\"\n\n\n\n    if (window.innerWidth <= 480) {\n        note = \"Use desktop for best experience\"\n    }\n\n    useEffect(() => {\n        const messages = [\n            'Loading Game ... wait 50 seconds',\n            'Get ready to guess some doodles...',\n            'Hold tight, we’re gathering your game!',\n            'Almost there! Your doodle challenge is coming...',\n            'Starting in 10 sec...'\n        ];\n\n        let messageIndex = 0;\n        const messageInterval = setInterval(() => {\n            note=\"\"\n            messageIndex = (messageIndex + 1) % messages.length; \n            setLoadingMessage(messages[messageIndex]);\n        }, 12000); \n\n        const loadingTimeout = setTimeout(() => {\n            clearInterval(messageInterval); \n        }, 58000);\n\n        return () => {\n            clearInterval(messageInterval);\n            clearTimeout(loadingTimeout);\n        };\n    }, []);\n\n    return (\n        <div className='loader-container'>\n            <span className=\"loading-msg\"> {loadingMessage}</span>\n            <span className=\"note\">{note}</span>\n            <div className='loader'></div>\n        </div>\n    )\n};\nexport default LoadingPage;","import React from 'react';\nimport '../css/homePage.css'\nimport { Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport LoadingPage from './LoadingPage';\n\nconst HomePage = () => {\n    const [loading, setLoading] = useState(true);\n    useEffect(() => {\n        const url = 'https://doodlebackend-fast-api.onrender.com'\n        // const url = 'http://127.0.0.1:8000';\n        fetch(url)\n            .then((response) => response.json())\n            .then(({ success }) => {\n\n                if(success){\n                    setLoading(false)\n                }else{\n                    setTimeout(()=>{\n                        setLoading(false)\n    \n                    },58000)\n                }\n            })\n    })\n\n    return (\n        <>\n            {loading ? (\n                <LoadingPage/>\n               \n            ) : (\n                <div className=\"home-container\">\n                    <div className=\"b1\">\n                        <header className=\"homepage-header\">\n                            <h1>Guess Doodles     </h1>\n                            <div className=\"icons-1\">\n                                <span className=\"ic1\">ᯓᡣ𐭩</span>\n                                <span className=\"ic2\">ᝰ.ᐟ</span>\n                                <span className=\"ic3\">꩜</span>\n                            </div>\n                        </header>\n\n                        <nav className=\"buttons-container\">\n                            <Link className=\"play-solo-btn\" to=\"/play\">\n                                <button>Play Solo</button>\n                            </Link>\n                            <Link className=\"play-solo-btn\" to=\"#\">\n                                <button><span>Multiplayer</span></button>\n                            </Link>\n                        </nav>\n                    </div>\n                    <div className=\"box\">\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\nexport default HomePage;\n","// DoodleSelector.js\nimport React from 'react';\nimport '../css/doodleSelector.css'\nimport data from '../files/data.json'\n\nconst DoodleSelector = ({ round, totalRounds, onSelect }) => {\n    function getRandom(arr, num) {\n        const shuffled = arr.sort(() => 0.5 - Math.random());\n        return shuffled.slice(0, num);\n    }\n\n    const doodles = getRandom(data.categories, 3);\n\n    return (\n        <>\n            <div className='doodle-selector-container'>\n\n                <div>\n                    <h3>Round : {round}/{totalRounds}</h3>\n                    <h1 className='msg'>Select Doodle</h1>\n                    <div className=\"doodle-selector\">\n\n                        {doodles.map((doodle) => (\n                            <div\n                                key={doodle}\n                                className=\"doodle-option\"\n                                onClick={() => onSelect(doodle)}\n                            >\n                                {doodle}\n                            </div>\n                        ))}\n\n                    </div>\n\n                    <div className='icons'>\n                        <span className='pencil'>✏️</span>\n                        <span className='duck'>𓅭</span>\n                        <span className='i3'>𓍯𓂃𓏧♡</span>\n                        <span className='i4'>〰</span>\n                        <span className='i5'>𝔁𝓸𝔁𝓸</span>\n                        <span className='i6'>•ᴗ•</span>\n                        <span className=\"i7\">꩜</span>\n                        <span className=\"i8\">༼ つ ◕_◕ ༽つ &lt;3</span>\n                        <span className=\"i9\">١٥٧٤♡</span>\n                    </div>\n\n\n                </div>\n\n\n\n            </div>\n\n        </>\n    );\n};\nexport default DoodleSelector;","import React, { useState, useEffect, useRef } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\n// import axios from 'axios';\nimport jimp from 'jimp';\nimport '../css/drawingCanvas.css';\n// import * as tf from '@tensorflow/tfjs';\n\nconst DrawingCanvas = ({ speak, voice1, voice2, nextRound, doodle, timer, setShowScoreCard, setScore, setTotalRounds, round }) => {\n\n    const [canvasStyle, setCanvasStyle] = useState({\n        width: '39rem',\n        height: '35rem',\n        backgroundColor: 'white',\n        borderLeft: '2px solid lightgrey',\n\n    })\n\n    const [prevResult, setPrevResult] = useState(\"\");\n    const [result, setResult] = useState('');\n    const [prediction, setPrediction] = useState([]);\n    const myCanvas = useRef();\n\n    useEffect(() => {\n        const updateCanvasStyle = () => {\n            // if (window.innerWidth < 480) {\n            //     setCanvasStyle({ width: \"300px\", height: \"300px\" });\n            // } else if (window.innerWidth < 720) {\n            //     setCanvasStyle({ width: \"400px\", height: \"400px\" });\n            // } else \n\n\n            if (window.innerWidth <= 720) {\n\n                setCanvasStyle({\n                    width: '100%',\n                    height: '21rem',\n                    backgroundColor: 'white',\n                    borderLeft: '2px solid lightgrey',\n                });\n\n            } else if (window.innerWidth <= 720) {\n\n                setCanvasStyle({\n                    width: '100%',\n                    height: '25rem',\n                    backgroundColor: 'white',\n                    borderLeft: '2px solid lightgrey',\n                });\n\n\n            } else if (window.innerWidth < 993) {\n                setCanvasStyle({\n                    width: '82%',\n                    height: '29rem',\n                    backgroundColor: 'white',\n                    borderLeft: '2px solid lightgrey',\n                });\n            } else {\n                setCanvasStyle({\n                    width: '39rem',\n                    height: '35rem',\n                    backgroundColor: 'white',\n                    borderLeft: '2px solid lightgrey',\n                });\n\n            }\n        };\n\n        updateCanvasStyle();\n        window.addEventListener(\"resize\", updateCanvasStyle);\n        return () => window.removeEventListener(\"resize\", updateCanvasStyle);\n    }, []);\n\n    // Use a ref to track already seen predictions\n    const seenPredictions = useRef(new Set());\n    useEffect(() => {\n        // console.log(window.speechSynthesis.getVoices());\n        if (timer % 4 === 0 && timer !== 32 && timer > 0 && !isCanvasEmpty()) {\n            console.log(\"Predicting at time remaining: \", timer);\n            getAnswer();\n        }\n    }, [timer]);\n\n    const handlePredictions = async () => {\n        for (let pred of prediction) {\n            pred = pred.replaceAll('_', ' ');\n            if (!seenPredictions.current.has(pred)) {\n                setPrevResult(prev => `${prev} a ${pred}, `);\n                seenPredictions.current.add(pred);\n                setResult(pred);\n                if (pred == doodle) {\n                    await speak(\"I know its \" + pred, voice1);\n                    window.speechSynthesis.cancel();\n                    break;\n\n                } else {\n                    await speak(\"a \" + pred, voice1);\n                }\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (prediction.length > 0 && result != doodle) {\n            handlePredictions()\n\n        }\n    }, [prediction]);\n\n    useEffect(() => {\n        if (result === doodle && result !== '') {\n            setTimeout(async () => {\n                // await speak('Hurrah !!!, guessed correctly.', voice2);\n                setScore(prev => prev + 1);\n                alert('press ok to continue')\n                nextRound();\n            }, 800);\n        }\n    }, [result]);\n\n    const convertURIToImageData = (URI) => {\n        return new Promise((resolve, reject) => {\n            if (URI == null) return reject();\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            const image = new Image();\n            image.addEventListener('load', () => {\n                canvas.width = image.width;\n                canvas.height = image.height;\n                context.drawImage(image, 0, 0, canvas.width, canvas.height);\n                resolve(context.getImageData(0, 0, canvas.width, canvas.height));\n            }, false);\n            image.src = URI;\n        });\n    };\n\n    const getAnswer = async () => {\n        const sketch = myCanvas.current.canvasContainer.children[1].toDataURL(\"image/png\");\n        try {\n            const sketchData = await convertURIToImageData(sketch);\n            const jimpImage = await jimp.read(sketchData);\n            jimpImage.resize(64, 64, jimp.RESIZE_BEZIER);\n            const buffer = await jimpImage.getBufferAsync(jimp.MIME_PNG);\n            const base64 = buffer.toString('base64');\n            const sketchDataURL = `data:image/png;base64,${base64}`;\n            const sketch28RGBAdata = await convertURIToImageData(sketchDataURL);\n            const data = Array.from(sketch28RGBAdata.data).filter((_, i) => i % 4 !== 3); // Keep only R, G, B channels\n            const grayData = data.reduce((acc, _, i) => {\n                if (i % 3 === 0) {\n                    const r = data[i];\n                    const g = data[i + 1];\n                    const b = data[i + 2];\n                    acc.push(Math.round(b / 255)); // Normalize to [0, 1]\n                }\n                return acc;\n            }, []);\n\n            // const tensor = tf.tensor(grayData).reshape([1, 64, 64, 1]);\n            // const reshapedGrayData = tensor.arraySync();\n            // console.log(reshapedGrayData); \n            // const url = 'http://127.0.0.1:5000/predict';\n\n            const url = 'https://doodlebackend-fast-api.onrender.com/predict'\n            // const url = 'http://127.0.0.1:8000/predict';\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ data: grayData })\n            };\n            const response = fetch(url, requestOptions).then(response => response.json())\n                .then(data => {\n                    // console.log(\"gotcha\")\n                    // console.log(data);\n                    setPrediction(data)\n                })\n            // const data = await response.json();\n            // this.setState({ postId: data.id });\n            // const response = await axios.post(url, JSON.stringify(grayData), {\n            //     headers: { 'Content-Type': 'application/json' }\n            // });\n            // console.log(response);\n            // console.log(response.data);\n            // setPrediction(response.data);\n\n        } catch (error) {\n            console.error(\"Error in getAnswer:\", error);\n        }\n    };\n\n    const isCanvasEmpty = () => {\n        const saveData = myCanvas.current.getSaveData();\n        return saveData.slice(1, 11) == `\"lines\":[]`;\n\n    };\n\n    const clearCanvas = () => {\n        myCanvas.current.clear();\n    };\n\n    const stopPlay = () => {\n        setShowScoreCard(true);\n        setTotalRounds((prev) => round);\n        setTimeout(() => {\n            nextRound();\n        }, 3000)\n    }\n\n    return (\n        <div className='drawing'>\n            <div className=\"canvas-box\">\n                <div className='button-container'>\n                    <button className=\"btn btn-outline-primary btn-md eraser\" onClick={clearCanvas}>\n                        <i class=\"fa-solid fa-trash\"></i> <span> clear</span>\n                    </button>\n\n                    <button onClick={() => stopPlay()}><i class=\"fa-solid fa-stop\"></i> <span> Stop</span> </button>\n                </div>\n\n                <CanvasDraw\n                    resize=\"false\"\n                    lazyRadius={0}\n                    brushRadius={0.8}\n                    brushColor={\"rgb(0,0,255)\"}\n                    hideGrid={true}\n                    style={canvasStyle}\n                    ref={myCanvas}\n                />\n            </div>\n            <div className=\"result\">\n                <h3>AI : Let me guess... </h3>\n                <span>This is&nbsp;</span>\n                <span>{prevResult.lastIndexOf(\" a \") != -1 ? prevResult.substring(0, prevResult.lastIndexOf(\" a \")).trim() : \"\"}</span>\n                <span>{\" a \" + result}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default DrawingCanvas;\n","// ScoreCard.js\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\nimport '../css/scoreCard.css'\nimport img from '../img/g6.webp'\nconst ScoreCard = ({ setScore, score, totalRounds }) => {\n\n\n    return (\n        <div className=\"score-card-container\">\n            {/* <div className=\"score-card\">\n                <h2>Score Card</h2>\n                <div className=\"score-stats\">\n                    <p>Score: {score}/{totalRounds}</p>\n                </div>\n                <Link className=\"home-page\" to=\"/\">\n                    <button onClick={() => setScore(0)}>\n                        Continue\n                    </button>\n                </Link>\n            </div> */}\n\n            <a href=\"#\">\n                <section className=\"score-card\">\n                    <img className=\"image\" src={img} alt=\"\" />\n                    <div className=\"design\"></div>\n                    <span className=\"score\">\n                        <span>\n                            Score: {score}/{totalRounds}\n                        </span>\n                        <Link className=\"home-page\" to=\"/\">\n                            <button className=\"cont-btn\" onClick={() => setScore(0)}>\n                                Continue\n                            </button>\n                        </Link>\n                    </span>\n                </section>\n            </a>\n        </div>\n    );\n};\nexport default ScoreCard;\n","import React, { useEffect, useState } from 'react';\nimport trollComments from '../files/trollComments.json';\nimport '../css/timer.css'\nimport img from '../img/a2.jpg'\n\nconst Timer = ({ nextRound, timeLeft, speak, voice1, voice2, voice3, score, isSpeaking, totalRounds }) => {\n    const [showBubble, setShowBubble] = useState(false);\n    const [bubbleText, setBubbleText] = useState(\"\");\n\n    const trollSpeak = async (text) => {\n        const voices = [[voice1, 1.1, 0.6], [voice2, 1, 0.7]];\n        const [selectedVoice, rate, pitch] = voices[Math.floor(Math.random() * voices.length)];\n        setBubbleText(text);      // Display the text in the bubble\n        setShowBubble(true);      // Show the bubble overlay\n        return new Promise((resolve) => {\n            const utterance = new SpeechSynthesisUtterance(text);\n            utterance.voice = selectedVoice;\n            utterance.pitch = pitch;\n            utterance.rate = rate;\n            utterance.onend = () => {\n                isSpeaking.current = false;\n                window.speechSynthesis.cancel();\n                setTimeout(() => {\n                    setShowBubble(false);  // Hide the bubble when speaking ends\n                    nextRound();\n                }, 1600)\n                resolve();\n            };\n            window.speechSynthesis.speak(utterance);\n            isSpeaking.current = true;\n        });\n    };\n\n    const trollUser = async () => {\n        const comment = trollComments.random[Math.floor(Math.random() * trollComments.random.length)];\n        await trollSpeak(comment);\n    }\n\n    useEffect(() => {\n        if (timeLeft == 0) {\n            if (Math.floor(Math.random() * 3) ==1) {\n                trollUser();\n            } else {\n                speak(\"Times up!!!\", voice2).then(() => {\n                    window.speechSynthesis.cancel();\n                    setTimeout(() => {\n                        alert('Failed to Guess!!!');\n                        nextRound();\n                    }, 300)\n                });\n            }\n        }\n    }, [timeLeft]);\n\n    return (\n        <>\n            <div className='timerContainer'>\n                <div className=\"time\">\n                    <h4>Time: {timeLeft}s</h4>\n                </div>\n                {showBubble && (\n                    <div className=\"overlay\">\n                        <div>\n                            <div className=\"circular-sb\">\n                                {bubbleText}\n                                <div className=\"circle1\"></div>\n                                <div className=\"circle2\"></div>\n                            </div>\n                            <div className=\"botimg\" ><img src={img} /></div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </>\n    );\n};\nexport default Timer;","import React, { useState } from 'react';\nimport DoodleSelector from './DoodleSelector';\nimport DrawingCanvas from './DrawingCanvas';\nimport ScoreCard from './ScoreCard';\nimport Timer from './Timer';\nimport { useDoodleGame } from '../hooks/useDoodleGame.js';\nimport '../css/PlaySolo.css';\n\nconst PlaySoloWithAI = () => {\n    const nefw = 3;\n    const {\n        selectedDoodle,\n        setSelectedDoodle,\n        score,\n        setScore,\n        totalRounds,\n        round,\n        setRound,\n        timeLeft,\n        setTimeLeft,\n        checkPrediction,\n        setIsPlaying,\n        speak,\n        showScoreCard,\n        setShowScoreCard,\n        voice1,\n        voice2,\n        voice3,\n        isSpeaking,\n        setTotalRounds\n    } = useDoodleGame();\n\n    const handleDoodleSelect = (doodle) => {\n        setSelectedDoodle(doodle);\n        setIsPlaying(true);\n    };\n    const nextRound = () => {\n        if(round==totalRounds){\n            setShowScoreCard(true);\n            setRound(1);\n        }else \n            setRound((prev)=>prev+1);\n        setSelectedDoodle(null);\n        setTimeLeft(32);\n        setIsPlaying(false);\n    }\n\n    return (\n        <div className=\"container\">\n            {showScoreCard ? (\n                <ScoreCard\n                    isSpeaking ={isSpeaking}\n                    score={score}\n                    totalRounds = {totalRounds}\n                    setScore = {setScore}\n                />\n            ) : (\n                <>\n                    {!selectedDoodle ? (\n                        <DoodleSelector round = {round} totalRounds={totalRounds} onSelect={handleDoodleSelect} />\n                    ) : (\n                        <div className=\"box1\">\n                            <h2>Draw: {selectedDoodle}</h2>\n                            <Timer  isSpeaking ={isSpeaking}\n                                voice1 = {voice1}\n                                voice2 = {voice2}\n                                voice3 = {voice3}\n                                score={score}\n                                totalRounds = {totalRounds}\n                                setScore = {setScore} speak={speak} timeLeft={timeLeft} nextRound={nextRound} />\n                            <div className = \"new\">\n                                <DrawingCanvas round= {round} setTotalRounds= {setTotalRounds} setScore={setScore} speak={speak} voice1={voice1} voice2={voice2} nextRound ={nextRound} doodle={selectedDoodle} setShowScoreCard={setShowScoreCard} timer={timeLeft} onDrawComplete={checkPrediction} />\n                            </div>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\nexport default PlaySoloWithAI;\n","import { useState, useEffect,useRef} from 'react';\nimport { predictDoodle } from '../utils/mlModel';\n\nexport const useDoodleGame = () => {\n    const [selectedDoodle, setSelectedDoodle] = useState(null);\n    const [showScoreCard, setShowScoreCard] = useState(false);\n    const [score,setScore] = useState(0);\n    const [totalRounds,setTotalRounds] = useState(4);\n    const [round,setRound] = useState(1);\n    const [timeLeft, setTimeLeft] = useState(32);\n    const [isPlaying, setIsPlaying] = useState(false);\n\n    const loadVoices = () => {\n        return new Promise((resolve) => {\n            const voices = window.speechSynthesis.getVoices();\n            if (voices.length > 0) {\n                resolve(voices);\n            } else {\n                window.speechSynthesis.onvoiceschanged = () => {\n                    resolve(window.speechSynthesis.getVoices());\n                };\n            }\n        });\n    };\n    \n    let voice1,voice2,voice3;\n    loadVoices().then((voices) => {\n        voice1 = voices.find(voice => voice.name === 'Google US English') || voices[0]; // Fallback if not found\n        voice2 = voices.find(voice => voice.name === 'Google UK English Male') || voices[0];\n        voice3 = voices.find(voice => voice.name.includes('Google') && voice.lang === 'hi-IN') || voices[0];\n    })\n\n    const isSpeaking = useRef(false);  \n    useEffect(() => {\n        let timer;\n        if (isPlaying) {\n            timer = setInterval(() => {\n                setTimeLeft((prev) => {\n                    if (prev <= 1) {\n                        clearInterval(timer);\n                        return 0;\n                    }\n                    return prev - 1;\n                });\n            }, 1000);\n        }\n        return () => clearInterval(timer);\n    }, [isPlaying]);\n\n    const speak = (text, voice) => {\n        return new Promise((resolve) => {\n            const utterance = new SpeechSynthesisUtterance(text);\n            utterance.voice = voice;\n            utterance.onend = () => {\n                \n                isSpeaking.current = false;\n                resolve();\n            };\n            window.speechSynthesis.speak(utterance);\n            isSpeaking.current = true;\n        });\n    };\n    return {voice3, isSpeaking,selectedDoodle,setSelectedDoodle,showScoreCard,setShowScoreCard,setTotalRounds, score, timeLeft, totalRounds,round,setRound,setScore, setIsPlaying, setTimeLeft,speak,voice1,voice2 };\n};\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch,withRouter } from 'react-router-dom';\nimport HomePage from './components/HomePage';\nimport PlaySoloWithAI from './components/PlaySoloWithAI';\nimport './App.css';\n\nconst App = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/\" exact component={HomePage} />\n                <Route path=\"/play\" component={PlaySoloWithAI} />\n            </Switch>\n\n        </Router>\n    );\n};\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}